#!/usr/bin/env node

/**
 * Core dependencies.
 */

var fs = require('fs');
var path = require('path');

/**
 * External dependencies.
 */

var program = require('commander');
var find = require('shelljs').find;

/**
 * Internal dependencies.
 */

var curiosity = require('..');

/**
 * Test path.
 */

var test = [];

/**
 * Ignore paths.
 */

var ignore = [];

/**
 * Production path.
 */

var prod = [];

/**
 * Formatter.
 */

var formatter = null;

/**
 * "Print" something on `stream`
 *
 * @param {Array|String} messages
 * @param {WritableStream} stream
 * @api private
 */

function printStream(messages, stream) {
  if (!Array.isArray(messages)) messages = [messages];
  stream.write('\n');
  messages.forEach(function(msg) {
    stream.write('    ' + msg + '\n');
  });
  stream.write('\n');
};

/**
 * Print message(es) to stdout.
 *
 * @param {Array|String} messages
 * @api private
 */

function print(arr) {
  printStream(arr, process.stdout);
}

/**
 * Print message(es) to stderr.
 *
 * @param {Array|String} messages
 * @api private
 */

function error(arr) {
  printStream(arr, process.stderr);
}

/**
 * Lookup & filter production and test files.
 *
 * @param {Array} production
 * @param {Array} test
 * @param {Array} ignore
 * @returns {Object}
 * @api private
 */

function lookup(prod, test, ignore) {
  var ignored = [];
  var tests = [];
  var lib = [];

  ignore.forEach(function(path) {
    ignored = ignored.concat(findr(path));
  });

  test.forEach(function(path) {
    var files = findr(path).filter(function(file) {
      return ignored.indexOf(file) === -1;
    });

    tests = tests.concat(files);
  });

  prod.forEach(function(path) {
    var files = findr(path).filter(function(file) {
      return ignored.indexOf(file) === -1 && tests.indexOf(file) === -1;
    });

    lib = lib.concat(files);
  });

  return { lib: lib, test: tests };
}

/**
 * Find all .js files in directory (recursively).
 *
 * @param {String} dir
 * @returns {Array}
 * @api private
 */

function findr(dir) {
  var full = path.normalize(dir);

  return find(full).filter(function(file) {
    return file.match(/\.js$/);
  });
}

program
  .usage('production-lib/ --test test-lib/')
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .option('--formatter <name>', 'specify formatter to use', 'json')
  .option('--tests <path>', 'specify folder with the tests')
  .option('--main <path>', 'specify folder with the production code')
  .option('--ignore <path>', 'specify path to ignore')
  .option('--per-file', 'return stats per file not for the whole folder')
  .option('--formatters', 'display all formatters');

program.name = 'curiosity';

// --formatters

program.on('formatters', function() {
  print([ 'table', 'json' ]);
  process.exit();
});

// --tests

program.on('tests', function(path) {
  test.push(path);
});

// --ignore

program.on('ignore', function(path) {
  ignore.push(path);
});

// --main

program.on('main', function(path) {
  prod.push(path);
});

program.parse(process.argv);

if (!prod.length) {
  program.help();
  process.exit();
}

try {
  formatter = require('../lib/curiosity/formatter/' + program.formatter);
} catch (e) {
  error('Invalid formatter: ' + program.formatter);
  process.exit(1);
}

var files = lookup(prod, test, ignore);
var prodCode = curiosity.analyzeFiles(files.lib);
var testCode = curiosity.analyzeFiles(files.test);

formatter.print(prodCode, testCode, process.stdout);
