#!/usr/bin/env node

/**
 * Core dependencies.
 */

var fs = require('fs');
var path = require('path');

/**
 * External dependencies.
 */

var program = require('commander');

/**
 * Internal dependencies.
 */

var curiosity = require('..');

/**
 * Ignore paths.
 */

var ignore = [];

/**
 * Formatter.
 */

var Formatter = null;

/**
 * "Print" something on `stream`
 *
 * @param {Array|String} messages
 * @param {WritableStream} stream
 * @api private
 */

function printStream(messages, stream) {
  if (!Array.isArray(messages)) messages = [messages];
  stream.write('\n');
  messages.forEach(function(msg) {
    stream.write('    ' + msg + '\n');
  });
  stream.write('\n');
};

/**
 * Print message(es) to stdout.
 *
 * @param {Array|String} messages
 * @api private
 */

function print(arr) {
  printStream(arr, process.stdout);
}

/**
 * Print message(es) to stderr.
 *
 * @param {Array|String} messages
 * @api private
 */

function error(arr) {
  printStream(arr, process.stderr);
}

/**
 * Get home path.
 *
 * @returns {String}
 * @api private
 */

function home() {
  return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
}

/**
 * Return the path where the local formatters can be.
 *
 * @returns {String}
 * @api private
 */

function localFormatters() {
  return path.join(home(), '.curiosity', 'formatters');
}

program
  .usage('<path>')
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .option('--ignore <path>', 'specify path to ignore')
  .option('--formatter <name>', 'specify formatter to use', 'total')
  .option('--formatters', 'display all formatters');

program.name = 'curiosity';

// --formatters

program.on('formatters', function() {
  var all = fs.readdirSync(path.join(__dirname, '..', 'lib', 'curiosity', 'formatter'));

  var formatters = all.filter(function(file) {
    return !/^\./.test(file);
  }).map(function(file) {
    return file.replace(/\.js$/, '');
  });

  formatters.push(' ');
  formatters.push('local formatters in: ' + localFormatters());

  print(formatters);
  process.exit();
});

// --ignore

program.on('ignore', function(path) {
  ignore.push(path);
});

program.parse(process.argv);

if (!program.args.length) {
  program.help();
  process.exit(1);
}

try {
  try {
    Formatter = require(localFormatters() + '/' + program.formatter);
  } catch (e) {
    Formatter = curiosity.loadFormatter(program.formatter);
  }
} catch (e) {
  error(e);
  error('Invalid formatter: ' + program.formatter);
  process.exit(1);
}

var files = curiosity.lookup(program.args, ignore);
var result = curiosity.analyzeFiles(files);
var formatter = new Formatter(result, process.stdout);

formatter.run();
